/*
 * MIT License
 *
 * Copyright (c) 2016-2018 The FredBoat Org https://github.com/FredBoat/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'


description = 'FredBoat backend, providing REST database services'
version '1.0'
ext {
    moduleName = 'Quarterdeck'
}

bootRun {
    //compiling tests during bootRun increases the likelyhood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

bootJar {
    archiveName = "Quarterdeck.jar"
    doLast {
        //copies the jar into a place where the Dockerfile can find it easily (and users maybe too)
        copy {
            from 'build/libs/Quarterdeck.jar'
            into '.'
        }
    }
}

test {
    useJUnitPlatform()
    systemProperty("keepPostgresContainer", System.getProperty("keepPostgresContainer"))
    systemProperty("databaseProvided", System.getProperty("databaseProvided"))
    jacoco {
        includes['com.fredboat.backend.*']
    }
}

sonarqube {
    properties {
        property 'sonar.inclusions', 'src/main/java/com/fredboat/backend/**/*'
    }
}

dependencies {
    //actually just the Shared module, jitpack falls back to top level project naming if there is only 1 artifact
    compile group: 'com.github.Frederikam', name: 'FredBoat', version: fredBoatRootVersion

    compile group: 'space.npstr.SqlSauce', name: 'sqlsauce-core', version: sqlsauceVersion
    compile group: 'org.hibernate', name: 'hibernate-ehcache', version: hibernateVersion
    compile group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
    compile group: 'net.ttddyy', name: 'datasource-proxy', version: dsProxyVersion
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbApiVersion // required by hibernate for java 9

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion) {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-undertow', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springBootVersion
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: springBootVersion

    compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxVersion
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxVersion

    compile group: 'it.unimi.dsi', name: 'fastutil', version: fastUtilVersion

    //testing
    //includes mockito, hamcrest and jayway
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
        exclude group: 'junit', module: 'junit' //don't drag in junit 4
        exclude group: 'com.vaadin.external.google', module: 'android-json' //don't drag in weird conflicting JSONObject
    }
    testCompile group: 'org.springframework.security', name: 'spring-security-test', version: springSecurityTestVersion
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
    //required for the docker compose rule https://github.com/palantir/docker-compose-rule/issues/224
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: jUnitVersion
    // To avoid compiler warnings about @API annotations in JUnit code.
    testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: apiGuardianVersion
    //allows us to fire up docker containers to test with, for example our postgres database
    testCompile group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: dockerComposeRuleVersion
}

//required by spring boot configuration processor
compileJava.dependsOn(processResources)

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.ext.moduleName,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV')
        ]
    }
}
